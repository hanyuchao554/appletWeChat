<template>
  <div class="taskList_page">
    <div class="header">
      <div class="header_left">
        <van-checkbox
          v-if="hasCheck"
          custom-class="v_checkBox"
          checked-color="#005bac"
          value="{{ allCheck }}"
          @change="onChangeAllCheck"
        ></van-checkbox>
      </div>
      <div class="header_center text-c">取消任务列表</div>
      <div class="header_right text-r">
        <div class="btn_d" @click="hasSelect">选择</div>
      </div>
    </div>
    <div class="content" :class="{ select_wrap: hasCheck }">
      <div class="item_wrap" v-for="(item, index) in list">
        <div v-if="hasCheck" class="checkBox">
          <van-checkbox
            custom-class="v_checkBox"
            checked-color="#005bac"
            value="{{ item.checked }}"
            @change="onChange(index)"
          ></van-checkbox>
        </div>
        <div
          @click="goToCancelDetail(item.applyId)"
          class="item"
          :class="{ select_item_wrap: hasCheck }"
        >
          <div class="item_header">
            <div class="item_header_left">
              <div class="tag" style="background:{{item.requestTypeBg}}">
                {{ item.requestTypeStr }}
              </div>
              <div>
                {{ item.listName }}
              </div>
            </div>
            <!-- <div class="font-26 font-color-blue">
              {{ item.taskStateName }}
            </div> -->
            <div class="contName" @tap.stop="conName(item.contPhon)">{{item.contName}}</div>
          </div>
          <!-- <div class="contName" @click="conName(item.contPhon,2)" :class="{'disabled' : disabled}">联系人：{{item.contName}}</div> -->
          <div class="memo">申请备注:{{ item.memo || '' }}</div>
          <div class="item_content">
            <div class="item_content_right">
              <div class="item_content_right_t">
                {{ item.deptName }} / {{ item.goodsWeight }}吨 /{{
                  item.startTimeStamp
                }}至{{ item.endTimeStamp }}
              </div>
              <div class="common_step">
                <div class="common_step_left">
                  <div class="common_step_left_t"></div>
                  <div class="common_step_left_c"></div>
                  <div class="common_step_left_b"></div>
                </div>
                <div class="common_step_center">
                  <div class="ellipsis">
                    起始地：{{ item.startPositionName }}
                  </div>
                  <div class="ellipsis">目的地：{{ item.endPositionName }}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div v-show="hasCheck" class="footer">
      <van-button custom-class="btn" type="default" @click="close"
        >取消</van-button
      >
      <van-button
        custom-class="btn"
        color="#005BAC"
        type="default"
        @click="submit"
        >确认</van-button
      >
    </div>
  </div>
</template>

<script>
import { BaseDataKey } from '@/constant';
import wepy from '@wepy/core';
import formatTimeTwo from '@/utils/moment.js';
import CommonMixin from '@/mixins/commonMixin.js';
wepy.page({
  mixins: [CommonMixin],
  data: {
    list: [],
    hasCheck: false,
  },
  onShow() {
    this.getAllTaskList();
  },
  computed: {
    allCheck() {
      return this.list.every((item) => item.checked);
    },
    applyIds() {
      let _applyIds = [];
      this.list.forEach((item) => {
        if (item.checked) _applyIds.push(item.applyId);
      });
      return _applyIds;
    },
  },
  methods: {
    close() {
      this.hasCheck = false;
      this.list.forEach((item) => (item.checked = false));
    },
    getAllTaskList() {
      wepy.$loading();
      wepy.$api('app/platformApply/getAllTaskList', {}).then((res) => {
        if (res && res.length) {
          let deList = JSON.parse(JSON.stringify(this.list));
          let _list = this.setPlatFormTaskList(res, true);
          this.list = _list.map((item) => {
            let flag = deList.find((sub) => sub.applyId === item.applyId);
            if (flag && flag.checked) {
              item.checked = true;
            }
            return item;
          });
          wx.hideToast();
        } else {
          this.list = [];
          wepy.$showToast('未查询到数据');
        }
      });
    },
    submit() {
      if (this.applyIds.length) {
        let ids = JSON.stringify(this.applyIds);
        wx.navigateTo({
          url: `/pages/cancelTask/cancelTask?applyIdList=${ids}`,
        });
      }
    },
    goToCancelDetail(businessKey) {
      wx.navigateTo({
        url: `/pages/cancelTask/cancelTaskDetail?businessKey=${businessKey}`,
      });
    },
    conName(tel){
        wx.makePhoneCall({
          phoneNumber:tel,
        })
        // console.log(12233444)
    },
    onChange(index) {
      let item = this.list[index];
      item.checked = !item.checked;
    },
    onChangeAllCheck(e) {
      // this.allCheck = e.$wx.detail;
      this.list.forEach((item) => {
        item.checked = e.$wx.detail;
      });
    },
    hasSelect() {
      if (this.list.length) {
        this.hasCheck = true;
      }
    },
    getTime(time) {
      return time ? formatTimeTwo(time * 1000, 'M-D h:m') : '';
    },
  },
});
</script>

<config>
{
  navigationBarTitleText:'平板车-取消任务列表',
    usingComponents:{
     "van-button": "module:@vant/weapp/dist/button/index",
     "van-checkbox": "module:@vant/weapp/dist/checkbox/index",
     "van-checkbox-group": "module:@vant/weapp/dist/checkbox-group/index",
  }
}
</config>

<style lang="less" scoped>
.taskList_page {
  position: relative;
  height: 100vh;
  background: #f3f4f6;
  .header {
    display: flex;
    position: fixed;
    width: 100%;
    height: 88rpx;
    justify-content: space-between;
    align-items: center;
    font-size: 32rpx;
    background: #fff;
    padding: 0 24rpx;
    box-sizing: border-box;
    &_left,
    &_right {
      width: 25%;
    }
    &_center {
      width: 50%;
    }
    .btn_d {
      display: inline-block;
      width: 110rpx;
      height: 48rpx;
      line-height: 48rpx;
      border-radius: 4rpx;
      font-size: 30rpx;
      background: #005bac;
      text-align: center;
      font-size: 32rpx;
      color: #ffff;
    }
  }
  .content {
    position: absolute;
    width: 100%;
    top: 108rpx;
    bottom: 20rpx;
    overflow-y: scroll; // padding-top: 34rpx;
  }
}
.contName{
  font-size: 28;
  // padding: 10rpx 0;
}
.memo {
  font-size: 28rpx;
  margin:0   0;
}
.item_wrap:first-child {
  margin-top: 0;
}
.item_wrap {
  display: flex;
  align-items: center;
  width: 702rpx;
  margin: 20rpx auto 0;
  .checkBox {
    width: 10%;
    flex: none;
  }
}
.select_item_wrap {
  width: 640rpx !important;
}
.item {
  width: 100%;
  background: #fff;
  box-shadow: 0rpx 0rpx 20rpx 0rpx #e1e5ee;
  border-radius: 8rpx;
  padding: 28rpx 26rpx;
  box-sizing: border-box;
  flex: none;
  &_header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    &_left {
      display: flex;
      align-items: center;
      font-size: 28rpx;
      font-weight: 500;
      color: #2b2b2b;
      line-height: 40rpx;
      .tag {
        color: #fff;
        font-size: 22rpx;
        padding: 5rpx 10rpx;
        line-height: 32rpx;
        border-radius: 5rpx;
        font-weight: 500;
        margin-right: 10rpx;
      }
    }
    &_right {
      font-size: 24rpx;
      font-weight: 500;
      color: #efa600;
      line-height: 34rpx;
    }
  }
  &_content {
    display: flex; // justify-content: space-between;
    margin-top: 12rpx;
    &_left {
      margin-right: 14rpx;
    }
    &_right {
      width: 100%;
      position: relative; // .common_step {
      //   width: 100%;
      //   position: absolute;
      //   bottom: 0;
      // }
      // .common_step_center {
      //   width: 100%;
      //   align-self: flex-end;
      // }
      &_t {
        font-size: 26rpx;
        font-weight: 400;
        color: #000;
        line-height: 1.2em;
      }
    }
  }
}
.footer {
  display: flex;
  position: fixed;
  width: 100%;
  justify-content: space-between;
  align-items: center;
  height: 130rpx;
  padding: 15rpx 24rpx;
  bottom: 0;
  box-sizing: border-box;
  .btn {
    width: 320rpx;
    height: 64rpx;
  }
}
.select_wrap {
  bottom: 130rpx !important;
}
</style>
